---
interface Question {
  title: string;
  paragraphs: string[];
}

interface Props {
  questions: Question[];
}

const { questions } = Astro.props;
---

<ol class="faq-questions">
  {
    questions.map(question => (
      <li class="faq-question interactable" id={'question-' + question.title}>
        <p class="body-20 faq-question-title">
          {question.title}
          <button
            type="button"
            class="faq-question-button interactable"
            data-question-id={'question-' + question.title}
          >
            {/* <img src="/assets/icons/arrow-down.svg" alt="Expandir" /> */}
          </button>
        </p>
        <div class="faq-question-content">
          {question.paragraphs.map(paragraph => (
            <p class="body-16 faq-question-paragraph">{paragraph}</p>
          ))}
        </div>
      </li>
    ))
  }
</ol>

<style lang="scss">
  .faq-questions {
    color: var(--white);
    width: 100%;
    max-width: 547px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    list-style-position: none;
    counter-reset: faq-counter;

    li {
      counter-increment: faq-counter;
      padding: 32px 0;
      border-top: 1px solid var(--gray-700);

      &::marker {
        content: counter(faq-counter, decimal-leading-zero) '.';
        color: #ffffff80;
      }

      &.faq-question {
        cursor: pointer;

        &--open {
          .faq-question-button {
            transform: rotate(180deg);
          }
        }
      }
      .faq-question {
        &-title {
          margin-left: 32px;
          color: var(--white);
          position: relative;
        }

        &-content {
          max-height: 0;
          overflow: hidden;
          transition: max-height 0.3s ease-out;
        }

        &-button {
          position: absolute;
          top: 0;
          right: 0;
          width: 32px;
          height: 32px;
          background: url('/assets/icons/arrow-down.svg') no-repeat center
            center;
          background-size: 50%;
          border-radius: 50%;
          transition: transform 0.3s ease;
          border: none;
        }
      }

      // .faq-question--open {
      //   .faq-question-button {
      //     transform: rotate(180deg) !important;
      //   }
      // }
    }
  }

  @media (max-width: 900px) {
    .interactable:hover {
      transform: none !important;
    }
  }

  @media (max-width: 400px) {
    .faq-question-title {
      margin-left: 10px !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqQuestions =
      document.querySelectorAll<HTMLElement>('.faq-question');

    faqQuestions.forEach(question => {
      question.addEventListener('click', () => {
        question.classList.toggle('faq-question--open');

        const content = question.querySelector<HTMLElement>(
          '.faq-question-content'
        );

        if (content) {
          if (question.classList.contains('faq-question--open')) {
            content.style.maxHeight = content.scrollHeight + 'px';
          } else {
            content.style.maxHeight = '0';
          }
        }
      });
    });
  });
</script>
