<div class="numbers">
  <div class="numbers-item">
    <h1 class="text-gradient animated-number" data-number="90" data-sufix="%">
      99%
    </h1>
    <h4 class="bold">Das empresas</h4>
    <p class="body-16">
      que utilizam JavaScript também exigem TypeScript como requisito.
    </p>
  </div>
  <div class="numbers-item">
    <h1 class="text-gradient animated-number" data-number="1" data-sufix="/3">
      1/3
    </h1>
    <h4 class="bold">Do mercado internacional</h4>
    <p class="body-16">usa TypeScript como tecnologia principal.</p>
  </div>
  <div class="numbers-item">
    <h1 class="text-gradient animated-number" data-number="2" data-sufix="ª">
      2ª
    </h1>
    <h4 class="bold">Tecnologia mais popular</h4>
    <p class="body-16">do mercado, mais até do que o JavaScript.</p>
  </div>
  <div class="numbers-item">
    <h1 class="text-gradient animated-number" data-number="83" data-sufix="%">
      83%
    </h1>
    <h4 class="bold">Dos desenvolvedores</h4>
    <p class="body-16">
      JavaScript precisam usar TypeScript em algum momento de suas carreiras.
    </p>
  </div>
</div>

<style lang="scss">
  .numbers {
    display: flex;
    flex-wrap: wrap;
    gap: 66px;
    margin: 84px 0;
    padding: 0 144px;
    justify-content: center;

    &-item {
      position: relative;
      width: 328px;

      h1,
      h4,
      p {
        margin: 0;
        text-align: left;
      }

      h4 {
        margin-top: 32px;
        margin-bottom: 16px;
      }

      &::before {
        content: '';
        position: absolute;
        top: 0;
        left: -24px;
        width: 2px;
        height: 100%;
        background: linear-gradient(
          to top,
          var(--blue-dark),
          var(--blue-light)
        );
      }
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.animated-number');

    const observer = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target;
            const targetNumber = parseInt(
              element.getAttribute('data-number').replace(/\D/g, '')
            );
            const sufix = element.getAttribute('data-sufix');
            let currentNumber = 0;
            const duration = 2000; // Animation duration in milliseconds
            const steps = 60; // Number of steps in the animation
            const increment = targetNumber / steps;

            const animate = () => {
              currentNumber += increment;
              if (currentNumber < targetNumber) {
                element.textContent =
                  Math.floor(currentNumber).toLocaleString() + sufix;
                requestAnimationFrame(animate);
              } else {
                element.textContent = targetNumber.toLocaleString() + sufix;
              }
            };

            animate();
            observer.unobserve(element);
          }
        });
      },
      { threshold: 0.1 }
    );

    elements.forEach(element => {
      observer.observe(element);
    });
  });
</script>
